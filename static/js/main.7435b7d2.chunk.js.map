{"version":3,"sources":["AddBar/AddBar2.js","ToDo/ToDo2.js","ToDoList/ToDoList2.js","App/App2.js","reportWebVitals.js","index.js"],"names":["AddBar2","props","id","dayOfTheWeek","onSubmit","event","preventDefault","newToDoObject","text","target","querySelector","value","editMode","index","tasks","length","addTask","stateSetter","className","type","defaultValue","size","onClick","ToDo2","toggleEditMode","state","todo","handleButtonClick","removeTask","handleSubmit","editer","ToDoList2","map","task","App2","useState","mondayTasks","mondayTasksSetter","tuesdayTasks","tuesdayTasksSetter","wednesdayTasks","wednesdayTasksSetter","thursdayTasks","thursdayTasksSetter","fridayTasks","fridayTasksSetter","saturdayTasks","saturdayTasksSetter","sundayTasks","sundayTasksSetter","atemporaryTasks","atemporaryTasksSetter","someStateSetter","someNewElement","prev","someState","indexOfTaskToRemove","filter","indexOfToDoToToggle","element","editTask","indexToReplaceAt","newText","rel","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7435b7d2.chunk.js","sourcesContent":["import React from 'react'\nimport './AddBar.css'\n\nfunction AddBar2(props) {\n    // This makes the text input blank when you click\n    function handleClick({target}) {\n    /* I don't want the stuff in the box to be erased when you are writing a reminder and you click the box to correct a \n       typo or something. */\n        if (target.value === 'Type here!') {\n            target.value = '';\n        }\n    }\n    //I'm using event rather than {target} because I need to use event.preventDefault()\n    function handleSubmit(event) {\n        event.preventDefault();\n        let newToDoObject = {\n            text: event.target.querySelector('input[type = \"text\"]').value,\n            editMode: false,\n            //Note this little smart move.\n            index: props.tasks.length,\n        }\n        props.addTask(props.stateSetter, newToDoObject);\n        //After you submit, this will make the text input read 'Type here!' again.\n        event.target.querySelector('input[type = \"text\"]').value = 'Type here!';\n    }\n    return (\n        <div id='AddBar'>\n            <h1>{props.dayOfTheWeek}</h1>\n            <form onSubmit={handleSubmit}>\n                {/* The size attribute allows us to make inputs of type 'text' longer (as in horizontally longer) */}\n                {/* From what I've seen, buttons of type submit work the same as inputs of type submit. */}\n                <input className='textField' type='text' defaultValue='Type here!' size='33' onClick={handleClick}></input>\n                <button className='fa fa-plus' type='submit'></button>\n            </form>\n        </div>\n    )\n}\n\nexport default AddBar2;\n","import React from 'react'\nimport './ToDo.css'\n\nfunction ToDo2 (props) {\n\n    function displayViewOnlyPack() {\n        return (\n            <ul className='ToDo'>\n                <li className='viewOnly' onClick={toggleEditMode}>{props.todo.text}</li>\n                <button className='fa fa-check-square' type='submit' onClick={handleButtonClick} ></button>\n            </ul>\n        )\n    }\n    /* For a while I thought about using <input> tags rather than <li> tags. That way, I would be able to edit the elements of the\n    list without the need to edit state and all. However, for some reason the removeTask() functions don't work as expected when\n    they deal with <input> tags rather than <li> tags. It was a very weird thing and made no sense. I get it's a React bug or \n    something. Anyway, so in light of that, and in addition of the fact that this feels like the more React-y way to do things, \n    (having a state and editing and stuff) I went this way. */\n    function toggleEditMode() {\n        props.toggleEditMode(props.state, props.stateSetter, props.todo.index);\n    }\n    function handleButtonClick() {\n        props.removeTask(props.state, props.stateSetter, props.todo.index);\n    }\n\n\n    function displayEditPack() {\n        //If you use value rather than defaultValue, you won't be able to edit (the text remains fixed no matter how hard you try to type something).\n        return (\n            <form className='ToDo' onSubmit={handleSubmit}>\n                {/* I tried having textAreas rather than text input tags, but I wasn't able to automatically size them to \n                the text in them.*/}\n                <input className='editor' type='text' defaultValue={props.todo.text}></input>\n                {/* You can only use a button rather than an input of type submit if you make the type of the button 'submit' */}\n                {/* Unrelated FYI: you can't give an INPUT of type submit an onClick={toggleEditMode} since if you do it stops being a \n                submit button (for some reason) and the form won't submit when you click it */}\n                <button className='fa fa-inbox' type='submit'></button>\n            </form>\n        )\n    }\n    function handleSubmit(event) {\n        event.preventDefault();\n        const text = event.target.querySelector('input[type = \"text\"]').value;\n        props.editer(props.state, props.stateSetter, props.todo.index, text);\n    }\n    \n    return (\n        <div> \n            {props.todo.editMode === true ? displayEditPack() : displayViewOnlyPack()}\n        </div> \n    )\n}\n\nexport default ToDo2;\n","import React from 'react'\nimport ToDo2 from '../ToDo/ToDo2.js'\nimport './ToDoList.css'\n\nfunction ToDoList2(props) {\n    return (\n        /* Note that you cannot directly return a JS thing: if you don't wrap this in <div>s, it breaks down. */\n         <div id='ToDoList'>\n            {/* For some reason sometimes if you use the name of a real attribute as prop, the code breaks down. \n            Before calling the prop “index” (in ToDoList.js) I called it “key”, and didn’t work. */}\n            {props.tasks.map((task) => <ToDo2 todo={task} state={props.tasks} stateSetter={props.stateSetter} removeTask={props.removeTask} toggleEditMode={props.toggleEditMode} editer={props.editer}/>)}\n        </div>      \n    )\n}\n\nexport default ToDoList2;\n","import React, {useState} from 'react'\nimport './App.css';\nimport AddBar2 from '../AddBar/AddBar2.js'\nimport ToDoList2 from '../ToDoList/ToDoList2.js'\n\nfunction App2() {\n\n  /* All of these (the \"dayOfTheWeekTasks\" states) are arrays of objects. They used to be arrays of Strings,\n     but using objects works better becaues that way I can give them an editMode field which allows me to change\n     individual toDos to edit mode rather than entire day sections (see version 1 of the program (App and company))*/\n  const [mondayTasks, mondayTasksSetter] = useState([]);\n  const [tuesdayTasks, tuesdayTasksSetter] = useState([]);\n  const [wednesdayTasks, wednesdayTasksSetter] = useState([]);\n  const [thursdayTasks, thursdayTasksSetter] = useState([]);\n  const [fridayTasks, fridayTasksSetter] = useState([]);\n  const [saturdayTasks, saturdayTasksSetter] = useState([]);\n  const [sundayTasks, sundayTasksSetter] = useState([]);\n  const [atemporaryTasks, atemporaryTasksSetter] = useState([]);\n\n  function addTask(someStateSetter, someNewElement) {\n    someStateSetter((prev) => [...prev, someNewElement])\n  }\n  function removeTask(someState, someStateSetter, indexOfTaskToRemove) {\n    someStateSetter(() => {\n      //We DO NOT return yet. If we do, the code will never reach line 31.\n      let newState = someState.filter((task, index) => {\n        /* The reason why this works is because given how we set up the ToDo indexes,\n           the index of the todo should match the index of its position in the array. */\n        return indexOfTaskToRemove !== index;\n      })\n      //After removing a ToDo, I need to update the indexes of the remaining ToDos\n      return newState.map((task, index) => {\n        //Note that you can return an object directly (no need to set up a variable).\n        return {\n          text: task.text,\n          editMode: task.editMode,\n          index: index,\n        }\n      })\n    })\n  }\n  function toggleEditMode(someState, someStateSetter, indexOfToDoToToggle) {\n    someStateSetter(() => {\n      return someState.map((element, index) => {\n        if (index === indexOfToDoToToggle) {\n          return {\n            text: element.text,\n            editMode: true,\n            index: element.index,\n          }\n        }\n          return element;\n      })\n    })\n  }\n  function editTask(someState, someStateSetter, indexToReplaceAt, newText) {\n    someStateSetter(() => {\n      return someState.map((element, index) => {\n        if (index === indexToReplaceAt) {\n          return {\n              text: newText,\n              //NOTE THIS STEP: we are setting editMode back to false.\n              editMode: false,\n              index: index,\n          };\n        }\n        return element;\n      })\n    })\n  }\n\n  return (\n    <div id='app'>\n      <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"></link>\n      <section id='Monday'>\n        <AddBar2 dayOfTheWeek='Monday' tasks={mondayTasks} stateSetter={mondayTasksSetter} addTask={addTask}/>\n        <ToDoList2 tasks={mondayTasks} stateSetter={mondayTasksSetter} removeTask={removeTask} toggleEditMode={toggleEditMode} editer={editTask}/>\n      </section>\n      <section id='Tuesday'>\n        <AddBar2 dayOfTheWeek='Tuesday' tasks={tuesdayTasks} stateSetter={tuesdayTasksSetter} addTask={addTask}/>\n        <ToDoList2 tasks={tuesdayTasks} stateSetter={tuesdayTasksSetter} removeTask={removeTask} toggleEditMode={toggleEditMode} editer={editTask}/>\n      </section>\n      <section id='Wednesday'>\n        <AddBar2 dayOfTheWeek='Wednesday' tasks={wednesdayTasks} stateSetter={wednesdayTasksSetter} addTask={addTask}/>\n        <ToDoList2 tasks={wednesdayTasks} stateSetter={wednesdayTasksSetter} removeTask={removeTask} toggleEditMode={toggleEditMode} editer={editTask}/>\n      </section>\n      <section id='Thursday'>\n        <AddBar2 dayOfTheWeek='Thursday' tasks={thursdayTasks} stateSetter={thursdayTasksSetter} addTask={addTask}/>\n        <ToDoList2 tasks={thursdayTasks} stateSetter={thursdayTasksSetter} removeTask={removeTask} toggleEditMode={toggleEditMode} editer={editTask}/>\n      </section>\n      <section id='Friday'>\n        <AddBar2 dayOfTheWeek='Friday' tasks={fridayTasks} stateSetter={fridayTasksSetter} addTask={addTask}/>\n        <ToDoList2 tasks={fridayTasks} stateSetter={fridayTasksSetter} removeTask={removeTask} toggleEditMode={toggleEditMode} editer={editTask}/>\n       </section>\n      <section id='Saturday'>\n        <AddBar2 dayOfTheWeek='Saturday' tasks={saturdayTasks} stateSetter={saturdayTasksSetter} addTask={addTask}/>\n        <ToDoList2 tasks={saturdayTasks} stateSetter={saturdayTasksSetter} removeTask={removeTask} toggleEditMode={toggleEditMode} editer={editTask}/>\n      </section>\n      <section id='Sunday'>\n        <AddBar2 dayOfTheWeek='Sunday' tasks={sundayTasks} stateSetter={sundayTasksSetter} addTask={addTask}/>\n        <ToDoList2 tasks={sundayTasks} stateSetter={sundayTasksSetter} removeTask={removeTask} toggleEditMode={toggleEditMode} editer={editTask}/>\n      </section>\n      <section id='Atemporary'>\n        <AddBar2 dayOfTheWeek='Atemporary' tasks={atemporaryTasks} stateSetter={atemporaryTasksSetter} addTask={addTask}/>\n        <ToDoList2 tasks={atemporaryTasks} stateSetter={atemporaryTasksSetter} removeTask={removeTask} toggleEditMode={toggleEditMode} editer={editTask}/>\n      </section> \n    </div>\n  )\n}\n\nexport default App2;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App2 from './App/App2.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App2 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}